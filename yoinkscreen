#!/bin/bash

statusfile="/tmp/yoinkscreen"

record_screen() {
	sleep 0.2

	folder="${HOME}/media/rec/$(date +"%y-%m")"
	file="rec-$(date +"%F_%T")"

	avipath="${folder}/${file}.avi"
	mp4path="${folder}/${file}.mp4"

	mkdir -p "$folder"

	# mark yoinkscreen as running
	echo 1 > "$statusfile"

	ffcast -s rec -m 2 "$avipath"

	ffmpeg -i "$avipath" "$mp4path" && rm "$avipath"

	# mark yoinkscreen as done
	if [ -f "$statusfile" ]; then
		rm "$statusfile"
	fi

	echo $mp4path
}

check_status() {
	if [ -f "$statusfile" ]; then
		echo "recording..."
	else
		echo ""
	fi
}

kill_recording() {
	pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
	killall ffcast
	killall xrectsel
	if [ -f "$statusfile" ]; then
		rm "$statusfile"
	fi
}

usage() {
    cat <<EOF
yoinkscreen v0.1
Usage:
  ${0##*/} [options]
Options:
  -s            print "recording" if active (otherwise no output) and exit. useful for status bars
  -h            print this help and exit
  -k            kill all running recording processes and exit (files will still be saved)
All options can be repeated, and are processed in order.
EOF
    exit "${1:-0}"
}

while getopts ":shk" arg; do
	case ${arg} in 
		h)
			usage
			exit 0
			;;
		s)
			check_status
			exit 0
			;;
		k)
			kill_recording
			exit 0
			;;
		:)
			echo "$0: Must supply an argument to -$OPTARG." >&2
			exit 1
			;;
		?)
			echo "Invalid option: -${OPTARG}."
			exit 2
			;;
	esac
done

if [ -f "$statusfile" ]; then
	kill_recording	
else
	record_screen
fi
